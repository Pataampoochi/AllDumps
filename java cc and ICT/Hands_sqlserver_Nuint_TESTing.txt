Create table with Foreign Key constraint
 create table orders(ord_no numeric(5),purch_amt decimal(8,2), ord_date date,customer_id numeric(5),salesman_id numeric(5) foreign key references salesman)


Alter Supplier table with Check Constraint

alter table supplier add check(len(contact)=10)


Worker and Admin Departments

SELECT a.deptname as "Worker Department", a.location as Location, b.deptname as "Manager Department"
 from department a join department b on a.admrdept=b.deptno and a.admrdept!=a.deptno
 order by a.deptname


Employee with reporting manger

select concat(a.lastname," works for ",b.lastname) as Hierarchy
    2 from
    3 (select e.lastname,e.empno,e.job,d.mgrno 
    4 from employee e
    5 join department d on e.workdept=d.deptno)
    6 as a join
    7 (select e.lastname,e.empno,e.job,d.mgrno
    8 from employee e
    9 join department d on e.workdept=d.deptno)
   10 as b on a.mgrno=b.empno 
   11 where a.mgrno!=a.empno
   12 order by a.lastname



Procedure to display the Employees of a specific Department

create proc EmployeeCount(@deptno char,@total_employees int output) as
    2 begin
    3 select count(*) from Employee where workdept= @deptno
    4 select @total_employees=@@ROWCOUNT
    5 end


Procedure to display all the Departments

CREATE PROCEDURE AvailableDepartments()
    2 AS
    3 SELECT e.deptname as Name from department e ;


Employees working in New York
 select e.firstname, e.lastname, e.salary from employee e
    2 join department d on e.workdept=d.deptno where d.location  = "New York"
    3 order by e.firstname;


Employee Count per Department

 create procedure
    2 EmployeeCount
    3 (
    4 @deptno char(3),
    5 @total_employees int output
    6 )
    7 As 
    8 begin
    9 select @total_employees=count(empno) from Employee where workdept = @deptno
   10 return @total_employees
   11 end



Retrieve the Employee Details

create procedure RetrieveEmpDetails @EmpNo char(6),@Name varchar(15) OUTPUT, @Job char(9) OUTPUT,@Sal decimal(9,2) OUTPUT
    2 as 
    3 select  @Name=lastname, @Job=job, @sal=salary from employee where empno=@EmpNo;



Procedure to retrieve the Player data

 create procedure  DisplayPlayer @rolename varchar(30)
    2 as begin select Player.playername from  Player join  Player_Role on 
    3 (Player.RoleId = Player_Role.RoleID and Player_Role.RoleName=@rolename) end


Trigger - claims

create trigger claim_audits on claim_audit for insert as
    2 declare @customer_name varchar(25);
    3 declare @amount_of_claim varchar(25);
    4 declare @action varchar(200);
    5 select @customer_name=i.customer_name from inserted i;
    6 select @amount_of_claim=i.amount_of_claim from inserted i;
    7 set @action='Updated customer claimed amount';
    8 go
    9 insert into claim_audit values('abhinav','195000','Updated customer claimed amount');


Department records using cursors

 declare @deptname varchar(36)
    2 declare @workdept char(3)
    3 declare c1 cursor
    4 for
    5 select deptname count(*) from department
    6 inner join employee
    7 on employee.workdept=department.deptno
    8 group by department.deptno,department.deptname
    9 order by deptname
   10 open c1
   11 fetch c1 into @deptnamet,@workdept
   12 while @@FETCH_STATUS=0
   13 begin
   14 print @deptname+'has'+@workdept+'employees';
   15 fetch c1 into @deptname,@workdept
   16 end
   17 close c1;
   18 deallocate c1;


Insert_records- Triggers-af_insert

 create trigger afinsert_policy on customer_policy
    2 after insert 
    3 as
    4 begin
    5     insert into customer_policy_audit select *,"New Record Inserted" from inserted
    6 end


Update Records -Trigger

create trigger trigger_customer_af_update on customer 
    2 after update
    3 as
    4 begin
    5     if update(phone_number)
    6         insert into customer_log_history select id,first_name,"Updated phone_number" from inserted
    7 end



Employee records using cursors

 declare @empno char(6), @name varchar(30),@salary decimal(9,2)
    2 declare emp_cur cursor for 
    3 select empno,concat(firstname," ",lastname),salary from Employee where salary ="000070" 
    4 open emp_cur
    5 fetch next from emp_cur into
    6     @empno,
    7     @name,
    8     @salary
    9 while @@fetch_status = 0
   10     begin
   11         print "ID is:"+@empno 
   12         print "Name is:"+@name
   13         print "Salary is:"+str(@salary);
   14         fetch next from emp_cur into 
   15            @empno,
   16            @name,
   17            @salary
   18     end
   19 close emp_cur
   20 deallocate emp_cur


Create a Procedure delete_status

 CREATE PROCEDURE delete_status @status_id integer
    2 AS 
    3 BEGIN
    4 
    5         ALTER TABLE claims
    6         begin try
    7         ADD error_msg varchar(200);
    8         end try
    9         begin catch
   10         print "child records existing in claims table"
   11         end catch
   12 END


NUnit and Mocking
--------------------------



Test Case - Check Equality
Program.cs
    1 //THIS IS FOR REFERENCE ONLY. YOU NEED NOT MAKE ANY CHANGES HERE
    2 using System;
    3 using System.Collections.Generic;
    4 using System.Linq;
    5 using System.Text;
    6 using System.Threading.Tasks;
    7 
    8 namespace DemoAppCore
    9 {
   10     public class Program
   11     {
   12         public static int AddNumbers(int num1,int num2)
   13         {
   14             return num1+num2;
   15         }
   16         public static int SubNumbers(int num1,int num2)
   17         {
   18             return num1-num2;
   19         }
   20         public static int MulNumbers(int num1,int num2)
   21         {
   22             return num1*num2;
   23         }
   24         public static int DivNumbers(int num1,int num2)
   25         {
   26             return num1/num2;
   27         }
   28     }
   29 }
   30 
FunctionalTest.cs
    1 using System;
    2 using System.Collections.Generic;
    3 using System.Text;
    4 using NUnit.Framework;
    5 
    6 
    7 
    8 namespace DemoAppCore
    9 {
   10 //Add required NUnit test attribute
   11 [TestFixture]
   12 class FunctionalTest
   13 {
   14 //Add required test methods
   15 [Test]
   16 public void Addition_AddingOfTwoNumbers_ReturnTrue(){
   17 var result=Program.AddNumbers(1,2);
   18 Assert.That(result,Is.EqualTo(3));
   19 }
   20 [Test]
   21 public void Subtract_SubtractionOfTwoNumbers_ReturnTrue(){
   22 var result=Program.SubNumbers(2,1);
   23 Assert.That(result,Is.EqualTo(1));
   24 }
   25 [Test]
   26 public void Multiplication_MultiplicationOfTwoNumbers_ReturnTrue(){
   27 var result=Program.MulNumbers(1,2);
   28 Assert.That(result,Is.EqualTo(2));
   29 }
   30 [Test]
   31 public void Division_DivisionOfTwoNumbers_ReturnTrue(){
   32 var result=Program.DivNumbers(3,2);
   33 Assert.That(result,Is.EqualTo(1));
   34 }
   35 }
   36 }

Check Object
--------------------
Program.cs
    1 //THIS IS FOR REFERENCE ONLY. YOU NEED NOT MAKE ANY CHANGES HERE
    2 using System;
    3 using System.Collections.Generic;
    4 using System.Linq;
    5 using System.Text;
    6 using System.Threading.Tasks;
    7 
    8 namespace DemoAppCore
    9 {
   10     public class Program
   11     {
   12         public static Employee e1=null;
   13         
   14         public static Employee EnrollEmployee()
   15         {
   16            return new Employee(){Name ="Tom",Id = "A1234"};
   17                 
   18         }
   19     }
   20     
   21     public class Employee
   22     {
   23         public string Name { get; set; }
   24         public string Id { get; set; }
   25     }
   26 }
   27 
FunctionalTest.cs
    1 using System;
    2 using System.Collections.Generic;
    3 using System.Text;
    4 using NUnit.Framework;
    5 
    6 namespace DemoAppCore
    7 {
    8     //Add required NUnit test attribute
    9     [TestFixture]
   10     class FunctionalTest
   11     {
   12         //Add required test methods
   13         [Test]
   14         public void Employee_e1_null()
   15         {
   16             Assert.That(Program.e1,Is.Null);
   17         }
   18         
   19         [Test]
   20         public void Employee_EnrollEmployee()
   21         {
   22             Employee result = Program.EnrollEmployee();
   23             Assert.That(result,Is.Not.Null);
   24             Assert.AreEqual(result.Name,"Tom");
   25             Assert.AreEqual(result.Id,"A1234");
   26         }
   27     }
   28 }
   29 

Conditional Statement
-----------------------------
Program.cs
    1 //THIS IS FOR REFERENCE ONLY. YOU NEED NOT MAKE ANY CHANGES HERE
    2 using System;
    3 using System.Collections.Generic;
    4 using System.Linq;
    5 using System.Text;
    6 using System.Threading.Tasks;
    7 
    8 namespace DemoAppCore
    9 {
   10     public class Program
   11     {
   12         
   13         
   14         public static string CalculateGrade(float mark)
   15         {
   16             string grade="";
   17             if(mark <40)
   18                 grade="FAIL";
   19             else if(mark >= 40)
   20                 grade="PASS";
   21             return grade;    
   22         }
   23     }
   24 }
   25 
FunctionalTest.cs
    1 using System;
    2 using System.Collections.Generic;
    3 using System.Text;
    4 using NUnit.Framework;
    5 
    6 namespace DemoAppCore
    7 {
    8     //Add required NUnit test attribute
    9     [TestFixture]
   10     class FunctionalTest
   11     {
   12         //Add required test methods
   13         [Test]
   14         [TestCase(38,"FAIL")]
   15         [TestCase(75,"PASS")]
   16         public void CalculateGrade_CheckConditions_ReturnsGrade1(float mark,string result)
   17         {
   18             var ans = Program.CalculateGrade(mark);
   19             Assert.That(ans,Is.EqualTo(result));
   20         }
   21     }
   22 }


Test Case - String Compare
----------------------------------
Program.cs
    1 //THIS IS FOR REFERENCE ONLY. YOU NEED NOT MAKE ANY CHANGES HERE
    2 using System;
    3 using System.Collections.Generic;
    4 using System.Linq;
    5 using System.Text;
    6 using System.Threading.Tasks;
    7 
    8 namespace DemoAppCore
    9 {
   10     public class Program
   11     {
   12         public static String FinalMessage()
   13         {
   14            return "The total is Rs.7600";
   15                 
   16         }
   17     }
   18     
   19     
   20 }
   21 
FunctionalTest.cs
    1 using System;
    2 using System.Collections.Generic;
    3 using System.Text;
    4 using NUnit.Framework;
    5 
    6 
    7 
    8 namespace DemoAppCore
    9 {
   10 //Add required NUnit test attribute
   11 [TestFixture]
   12 class FunctionalTest
   13 {
   14 //Add required test methods
   15 [Test]
   16 public void FinalMessageTest_CheckingStringWithTotal_ReturnsTrue(){
   17 var str=Program.FinalMessage();
   18 StringAssert.Contains("total",str);
   19 }
   20 [Test]
   21 public void FinalMessageTest_CheckingStringWith7600_ReturnsTrue(){
   22 var str=Program.FinalMessage();
   23 StringAssert.Contains("7600",str);
   24 }
   25 }
   26 }


Test Case - Collections
-----------------------------
Program.cs
    1 //THIS IS FOR REFERENCE ONLY. YOU NEED NOT MAKE ANY CHANGES HERE
    2 using System;
    3 using System.Collections.Generic;
    4 using System.Linq;
    5 using System.Text;
    6 using System.Threading.Tasks;
    7 
    8 namespace DemoAppCore
    9 {
   10     public class Program
   11     {
   12         public static List<string> names=null;
   13         public static List<string> FinalList()
   14         {
   15            names=new List<string>();
   16            names.Add("Peter");
   17            names.Add("Sally");
   18            names.Add("Nimmi");
   19            return names;        
   20         }
   21     }
   22     
   23     
   24 }
   25 
FunctionalTest.cs
    1 using System;
    2 using System.Collections.Generic;
    3 using System.Text;
    4 using NUnit.Framework;
    5 
    6 namespace DemoAppCore
    7 {
    8     //Add required NUnit test attribute
    9     [TestFixture]
   10     public class FunctionalTest
   11     {
   12         //Add required test methods
   13         [Test]
   14         public void FinalList_Variable_CheckIsNull()
   15         {
   16             var ans = Program.names;
   17             Assert.That(ans,Is.Null);
   18         }
   19         [Test]
   20         public void FinalList_WhenInvoked_CheckUnique()
   21         {
   22             var ans = Program.FinalList();
   23             CollectionAssert.AllItemsAreUnique(ans);
   24         }
   25         [Test]
   26         public void FinalList_WhenInvoked_CheckEqual()
   27         {
   28             var ans = Program.FinalList();
   29             CollectionAssert.AreEqual("Peter",ans[0]);
   30         }
   31     }
   32 }


Purchase Asset
-----------------------
FunctionalTest.cs
    1 using System;
    2 using System.Collections.Generic;
    3 using System.Text;
    4 using NUnit.Framework;
    5 
    6 namespace AssetProject {
    7   //Add required NUnit test attribute
    8   [TestFixture]
    9   public class FunctionalTest {
   10     //Add required test methods
   11     [Test]
   12     public void TestValidAsset_CheckingValidateAsset_ReturnsTrue() {
   13       var a = new Asset() {
   14         Cost = 5000
   15       };
   16       var b = new AssetBO();
   17       var result = b.ValidateAsset(a);
   18       Assert.That(result, Is.EqualTo("Asset Valid"));
   19     }
   20 
   21     [Test]
   22     public void TestInValidAsset_CheckingValidateAsset_ReturnsException() {
   23       try {
   24         var a = new Asset() {
   25           Cost = 500
   26         };
   27         var b = new AssetBO();
   28         var result = b.ValidateAsset(a);
   29         var ex = new InvalidCostException();
   30         Assert.That(() => result, Throws.InvalidOperationException);
   31       } catch (Exception ex) {}
   32     }
   33   }
   34 }
Asset.cs
    1 //THIS IS FOR REFERENCE ONLY. YOU NEED NOT MAKE ANY CHANGES HERE
    2 using System;
    3 
    4 namespace AssetProject
    5 {
    6     public class Asset
    7     {
    8         private string _name;
    9         private string _category;
   10         private string _model;
   11         private double _cost;
   12         
   13         public string Name{ get; set; }
   14         public string Category{ get; set; }
   15         public string Model{ get; set; }
   16         public double Cost{ get; set; }
   17         
   18         public Asset(){}
   19         public Asset(string name,string category,string model,double cost)
   20         {
   21             _name=name;
   22             _category=category;
   23             _model=model;
   24             _cost=cost;
   25         }
   26         
   27     }
   28 }
   29 
AssetBO.cs
    1 //THIS IS FOR REFERENCE ONLY. YOU NEED NOT MAKE ANY CHANGES HERE
    2 using System;
    3 
    4 namespace AssetProject
    5 {
    6     public class AssetBO
    7     {
    8         public string ValidateAsset(Asset asset)
    9         {
   10             if(asset.Cost > 1000 && asset.Cost < 10000)
   11                 return "Asset Valid";
   12             else
   13                 throw new InvalidCostException();
   14         }
   15     }
   16     
   17     public class InvalidCostException : Exception
   18     {
   19         public InvalidCostException(){}
   20     }
   21 }
   22 



